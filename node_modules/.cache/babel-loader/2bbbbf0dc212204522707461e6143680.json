{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, migrateParsedInputForNewCountry, getCountryForPartialE164Number, getInitialParsedInput, parseInput, e164 } from './phoneInputHelpers';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange;\n      var _this$state = _this.state,\n          prevParsedInput = _this$state.parsedInput,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newParsedInput = migrateParsedInputForNewCountry(prevParsedInput, prevCountry, newCountry, metadata, // Convert the phone number to \"national\" format\n      // when the user changes the selected country by hand.\n      international ? false : true);\n      var newValue = e164(newParsedInput, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      _this.getInputRef().current.focus(); // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        parsedInput: newParsedInput,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_input) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          metadata = _this$props2.metadata;\n\n      var _parseInput = parseInput(_input, _this.state.parsedInput, _this.state.country, defaultCountry, _this.state.countries, addInternationalOption, international, limitMaxLength, metadata),\n          input = _parseInput.input,\n          country = _parseInput.country,\n          value = _parseInput.value;\n\n      _this.setState({\n        parsedInput: input,\n        value: value,\n        country: country\n      }, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        _metadata = _this$props3.metadata,\n        countryOptionsOrder = _this$props3.countryOptionsOrder;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    countries = getSupportedCountries(countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: getPreSelectedCountry(phoneNumber, _defaultCountry, countries || getCountries(_metadata), _addInternationalOption, _metadata),\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: countries,\n      // `parsedInput` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsedInput` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsedInput` is `+78005553535`.\n      parsedInput: generateInitialParsedInput(_value, phoneNumber, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsedInput` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsedInput` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"getInputRef\",\n    value: function getInputRef() {\n      var inputRef = this.props.inputRef;\n      return inputRef || this.inputRef;\n    } // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsedInput` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          name = _this$props5.name,\n          disabled = _this$props5.disabled,\n          autoComplete = _this$props5.autoComplete,\n          style = _this$props5.style,\n          className = _this$props5.className,\n          inputRef = _this$props5.inputRef,\n          inputComponent = _this$props5.inputComponent,\n          numberInputProps = _this$props5.numberInputProps,\n          smartCaret = _this$props5.smartCaret,\n          CountrySelectComponent = _this$props5.countrySelectComponent,\n          countrySelectProps = _this$props5.countrySelectProps,\n          defaultCountry = _this$props5.defaultCountry,\n          countries = _this$props5.countries,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          labels = _this$props5.labels,\n          flags = _this$props5.flags,\n          flagComponent = _this$props5.flagComponent,\n          flagUrl = _this$props5.flagUrl,\n          addInternationalOption = _this$props5.addInternationalOption,\n          internationalIcon = _this$props5.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props5.displayInitialValueAsLocalNumber,\n          onCountryChange = _this$props5.onCountryChange,\n          limitMaxLength = _this$props5.limitMaxLength,\n          reset = _this$props5.reset,\n          metadata = _this$props5.metadata,\n          international = _this$props5.international,\n          rest = _objectWithoutProperties(_this$props5, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"onCountryChange\", \"limitMaxLength\", \"reset\", \"metadata\", \"international\"]);\n\n      var _this$state2 = this.state,\n          country = _this$state2.country,\n          parsedInput = _this$state2.parsedInput,\n          isFocused = _this$state2.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(getCountrySelectOptions(countries || getCountries(metadata), labels, addInternationalOption), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n      return React.createElement(\"div\", {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.getInputRef(),\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: parsedInput || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          prevDefaultCountry = _state$props.defaultCountry,\n          prevValue = _state$props.value,\n          prevReset = _state$props.reset;\n      var metadata = props.metadata,\n          countries = props.countries,\n          newDefaultCountry = props.defaultCountry,\n          newValue = props.value,\n          newReset = props.reset,\n          international = props.international;\n      var newState = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the `defaultCountry` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry\n      }; // Some users requested a way to reset the component\n      // (both number `<input/>` and country `<select/>`).\n      // Whenever `reset` property changes both number `<input/>`\n      // and country `<select/>` are reset.\n      // It's not implemented as some instance `.reset()` method\n      // because `ref` is forwarded to `<input/>`.\n      // It's also not replaced with just resetting `country` on\n      // external `value` reset, because a user could select a country\n      // and then not input any `value`, and so the selected country\n      // would be \"stuck\", if not using this `reset` property.\n      // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n      if (newReset !== prevReset) {\n        return _objectSpread({}, newState, {\n          parsedInput: undefined,\n          value: undefined,\n          country: newDefaultCountry,\n          hasUserSelectedACountry: undefined\n        });\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (newDefaultCountry !== prevDefaultCountry && !hasUserSelectedACountry && (!value && !newValue || international && value === getInitialParsedInput(undefined, prevDefaultCountry, international, metadata) && value === getInitialParsedInput(undefined, newDefaultCountry, international, metadata))) {\n        return _objectSpread({}, newState, {\n          country: isCountrySupportedWithError(newDefaultCountry, metadata) ? newDefaultCountry : prevDefaultCountry,\n          // If `parsedInput` is empty, then automatically select the new `country`\n          // and set `parsedInput` to `+{getCountryCallingCode(newCountry)}`.\n          parsedInput: generateInitialParsedInput(newValue, undefined, props) // `value` is `undefined`.\n          // `parsedInput` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `newValue !== prevValue` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `newValue !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (newValue !== prevValue && newValue !== value) {\n          var phoneNumber = parsePhoneNumber(newValue, metadata);\n          var parsedCountry;\n\n          if (phoneNumber) {\n            var _countries = getSupportedCountries(props.countries, metadata);\n\n            if (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n              parsedCountry = phoneNumber.country;\n            }\n          }\n\n          if (!newValue) {\n            newState.hasUserSelectedACountry = undefined;\n          }\n\n          return _objectSpread({}, newState, {\n            parsedInput: generateInitialParsedInput(newValue, phoneNumber, props),\n            value: newValue,\n            country: newValue ? parsedCountry : newDefaultCountry\n          });\n        } // `defaultCountry` didn't change.\n      // `value` didn't change.\n      // `parsedInput` didn't change, because `value` didn't change.\n      //\n      // So no need to update state here really.\n      // Could as well return `null` explicitly\n      // to indicate that the `state` hasn't changed.\n      // But just in case, returns `newState`.\n      // (who knows if someone adds something\n      // changing `newState` above in some future)\n\n\n      return newState;\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\r\n   * Set to `true` to disable both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: PropTypes.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted, in which case it will automatically be added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * By default, the caret position is being \"intelligently\" managed\r\n   * while a user inputs a phone number.\r\n   * This \"smart\" caret behavior can be turned off\r\n   * by passing `smartCaret={false}` property.\r\n   * This is just an \"escape hatch\" for any possible caret position issues.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://catamphetamine.gitlab.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n};\nexport default PhoneNumberInput;\n/**\r\n * Gets initial `parsedInput` value.\r\n * @param  {string} [value]\r\n * @param  {PhoneNumber} [phoneNumber]\r\n * @param  {boolean} [options.international]\r\n * @param  {string} [options.defaultCountry]\r\n * @param  {boolean} options.displayInitialValueAsLocalNumber\r\n * @param  {object} options.metadata\r\n * @return {string} [parsedInput]\r\n */\n\nfunction generateInitialParsedInput(value, phoneNumber, _ref) {\n  var international = _ref.international,\n      defaultCountry = _ref.defaultCountry,\n      metadata = _ref.metadata,\n      displayInitialValueAsLocalNumber = _ref.displayInitialValueAsLocalNumber; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  }\n\n  return getInitialParsedInput(value, defaultCountry, international, metadata);\n}\n\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["../source/PhoneInputWithCountry.js"],"names":["metadata","labels","PhoneNumberInput_","React","PureComponent","value","addInternationalOption","countryOptionsOrder","defaultCountry","countries","getSupportedCountries","phoneNumber","parsePhoneNumber","createCountryIconComponent","props","country","getPreSelectedCountry","getCountries","parsedInput","generateInitialParsedInput","onCountryChange","selectedCountry","prevProps","prevState","isCountrySupportedWithError","international","onChange","prevParsedInput","prevCountry","newParsedInput","migrateParsedInputForNewCountry","newValue","e164","hasUserSelectedACountry","limitMaxLength","input","parseInput","isFocused","onFocus","onBlur","countrySelectProps","inputRef","state","prevDefaultCountry","prevValue","prevReset","newDefaultCountry","newReset","newState","undefined","getInitialParsedInput","parsedCountry","name","disabled","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","flags","flagComponent","flagUrl","internationalIcon","displayInitialValueAsLocalNumber","reset","rest","InputComponent","countrySelectOptions","useMemoCountrySelectOptions","sortCountryOptions","getCountrySelectOptions","getSupportedCountryOptions","classNames","CountryIcon","PhoneNumberInput","ref","PropTypes","onKeyDown","labelsPropType","countrySelectComponent","metadataPropType","func","generateNationalNumberDigits","areEqualArrays","countrySelectOptionsMemo","generator","countrySelectOptionsMemoDependencies","a","b","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAEA,OAAA,UAAA,MAAA,cAAA;AACA,OAAA,UAAA,MAAA,cAAA;AAEA,OAAA,IAAA,MAAA,QAAA;AACA,OAAA,iBAAA,MAAA,qBAAA;AAEA,SAAA,kBAAA,EAAA,2BAAA,EAAA,qBAAA,EAAA,0BAAA,EAAA,YAAA,QAAA,aAAA;AAQA,SAAA,0BAAA,QAAA,eAAA;AAEA,SACCA,QAAQ,IADT,gBAAA,EAECC,MAAM,IAFP,cAAA,QAAA,aAAA;AAKA,SAAA,qBAAA,EAAA,uBAAA,EAAA,gBAAA,EAAA,4BAAA,EAAA,+BAAA,EAAA,8BAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,IAAA,QAAA,qBAAA;;IAYMC,iB;;;AAGL,WAAA,iBAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;AAClB,IAAA,KAAA,GAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,CAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;AADkB,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAFRC,KAAK,CAALA,SAAAA,EAEQ,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,6BAAA,EAoGW,UAAA,OAAA,EAAa;AAAA,UAClCH,QADkC,GACrB,KAAA,CADqB,KACrB,CADqB,QAAA;AAE1C,aAAOwB,2BAA2B,CAAA,OAAA,EAAlC,QAAkC,CAAlC;AAtGkB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,iBAAA,EA0GD,UAAA,UAAA,EAAgB;AAAA,UAAA,WAAA,GAK7B,KAAA,CAL6B,KAAA;AAAA,UAEhCC,aAFgC,GAAA,WAAA,CAAA,aAAA;AAAA,UAGhCzB,QAHgC,GAAA,WAAA,CAAA,QAAA;AAAA,UAIhC0B,QAJgC,GAAA,WAAA,CAAA,QAAA;AAAA,UAAA,WAAA,GAU7B,KAAA,CAV6B,KAAA;AAAA,UAQnBC,eARmB,GAAA,WAAA,CAAA,WAAA;AAAA,UASvBC,WATuB,GAAA,WAAA,CAAA,OAAA,CAAA,CAYjC;AACA;AACA;;AACA,UAAMC,cAAc,GAAGC,+BAA+B,CAAA,eAAA,EAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAKrD;AACA;AACAL,MAAAA,aAAa,GAAA,KAAA,GAPd,IAAsD,CAAtD;AAUA,UAAMM,QAAQ,GAAGC,IAAI,CAAA,cAAA,EAAA,UAAA,EAzBY,QAyBZ,CAArB,CAzBiC,CA2BjC;;AACA,MAAA,KAAA,CAAA,WAAA,GAAA,OAAA,CA5BiC,KA4BjC,GA5BiC,CA8BjC;AACA;AACA;AACA;;;AAEA,MAAA,KAAA,CAAA,QAAA,CAAc;AACbjB,QAAAA,OAAO,EADM,UAAA;AAEbkB,QAAAA,uBAAuB,EAFV,IAAA;AAGbf,QAAAA,WAAW,EAHE,cAAA;AAIbb,QAAAA,KAAK,EAAE0B;AAJM,OAAd,EAMA,YAAM;AACL;AACA;AACA;AACA;AACAL,QAAAA,QAAQ,CAARA,QAAQ,CAARA;AAXD,OAAA;AA7IkB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAiKR,UAAA,MAAA,EAAY;AAAA,UAAA,YAAA,GAQlB,KAAA,CARkB,KAAA;AAAA,UAErBlB,cAFqB,GAAA,YAAA,CAAA,cAAA;AAAA,UAGrBkB,QAHqB,GAAA,YAAA,CAAA,QAAA;AAAA,UAIrBpB,sBAJqB,GAAA,YAAA,CAAA,sBAAA;AAAA,UAKrBmB,aALqB,GAAA,YAAA,CAAA,aAAA;AAAA,UAMrBS,cANqB,GAAA,YAAA,CAAA,cAAA;AAAA,UAOrBlC,QAPqB,GAAA,YAAA,CAAA,QAAA;;AAAA,UAAA,WAAA,GAclBoC,UAAU,CAAA,MAAA,EAEb,KAAA,CAAA,KAAA,CAFa,WAAA,EAGb,KAAA,CAAA,KAAA,CAHa,OAAA,EAAA,cAAA,EAKb,KAAA,CAAA,KAAA,CALa,SAAA,EAAA,sBAAA,EAAA,aAAA,EAAA,cAAA,EAdQ,QAcR,CAdQ;AAAA,UAWrBD,KAXqB,GAAA,WAAA,CAAA,KAAA;AAAA,UAYrBpB,OAZqB,GAAA,WAAA,CAAA,OAAA;AAAA,UAarBV,KAbqB,GAAA,WAAA,CAAA,KAAA;;AA0BtB,MAAA,KAAA,CAAA,QAAA,CAAc;AACba,QAAAA,WAAW,EADE,KAAA;AAEbb,QAAAA,KAAK,EAFQ,KAAA;AAGbU,QAAAA,OAAO,EAAPA;AAHa,OAAd,EAKA;AACA;AACA;AACA;AACA,kBAAA;AAAA,eAAMW,QAAQ,CAAd,KAAc,CAAd;AATA,OAAA;AA3LkB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAwMR,YAAA;AAAA,aAAM,KAAA,CAAA,QAAA,CAAc;AAAEW,QAAAA,SAAS,EAAE;AAAb,OAAd,CAAN;AAxMQ,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EA2MT,YAAA;AAAA,aAAM,KAAA,CAAA,QAAA,CAAc;AAAEA,QAAAA,SAAS,EAAE;AAAb,OAAd,CAAN;AA3MS,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,SAAA,EA6MT,UAAA,KAAA,EAAW;AACpB,MAAA,KAAA,CAAA,QAAA;;AADoB,UAEZC,OAFY,GAEA,KAAA,CAFA,KAEA,CAFA,OAAA;;AAGpB,UAAA,OAAA,EAAa;AACZA,QAAAA,OAAO,CAAPA,KAAO,CAAPA;AACA;AAlNiB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,QAAA,EAqNV,UAAA,KAAA,EAAW;AAAA,UACXC,MADW,GACA,KAAA,CADA,KACA,CADA,MAAA;;AAEnB,MAAA,KAAA,CAAA,OAAA;;AACA,UAAA,MAAA,EAAY;AACXA,QAAAA,MAAM,CAANA,KAAM,CAANA;AACA;AA1NiB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,gBAAA,EA6NF,UAAA,KAAA,EAAW;AAC3B,MAAA,KAAA,CAD2B,QAC3B,GAD2B,CAE3B;;;AAF2B,UAGnBC,kBAHmB,GAGI,KAAA,CAHJ,KAGI,CAHJ,kBAAA;;AAI3B,UAAA,kBAAA,EAAwB;AAAA,YACfF,OADe,GACHE,kBADG,CAAA,OAAA;;AAEvB,YAAA,OAAA,EAAa;AACZF,UAAAA,OAAO,CAAPA,KAAO,CAAPA;AACA;AACD;AAtOiB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAyOH,UAAA,KAAA,EAAW;AAC1B,MAAA,KAAA,CAD0B,OAC1B,GAD0B,CAE1B;;;AAF0B,UAGlBE,kBAHkB,GAGK,KAAA,CAHL,KAGK,CAHL,kBAAA;;AAI1B,UAAA,kBAAA,EAAwB;AAAA,YACfD,MADe,GACJC,kBADI,CAAA,MAAA;;AAEvB,YAAA,MAAA,EAAY;AACXD,UAAAA,MAAM,CAANA,KAAM,CAANA;AACA;AACD;AAlPiB,KAAA,CAAA;;AAAA,QAAA,YAAA,GASd,KAAA,CATc,KAAA;AAAA,QAIjBlC,MAJiB,GAAA,YAAA,CAAA,KAAA;AAAA,QAKjBJ,MALiB,GAAA,YAAA,CAAA,MAAA;AAAA,QAMjBK,uBANiB,GAAA,YAAA,CAAA,sBAAA;AAAA,QAOjBN,SAPiB,GAAA,YAAA,CAAA,QAAA;AAAA,QAQjBO,mBARiB,GAAA,YAAA,CAAA,mBAAA;AAAA,QAAA,YAAA,GAcd,KAAA,CAdc,KAAA;AAAA,QAYjBC,eAZiB,GAAA,YAAA,CAAA,cAAA;AAAA,QAajBC,SAbiB,GAAA,YAAA,CAAA,SAAA,CAAA,CAgBlB;;AACA,QAAA,eAAA,EAAoB;AACnB,UAAI,CAAC,KAAA,CAAA,2BAAA,CAAL,eAAK,CAAL,EAAuD;AACtDD,QAAAA,eAAc,GAAdA,SAAAA;AACA;AApBgB,KAAA,CAuBlB;;;AACAC,IAAAA,SAAS,GAAGC,qBAAqB,CAAA,SAAA,EAAjCD,SAAiC,CAAjCA;AAEA,QAAME,WAAW,GAAGC,gBAAgB,CAAA,MAAA,EAApC,SAAoC,CAApC;AAEA,IAAA,KAAA,CAAA,WAAA,GAAmBC,0BAA0B,CAAC,KAAA,CAA9C,KAA6C,CAA7C;AAEA,IAAA,KAAA,CAAA,KAAA,GAAa;AACZ;AACAC,MAAAA,KAAK,EAAE,KAAA,CAFK,KAAA;AAIZ;AACAC,MAAAA,OAAO,EAAEC,qBAAqB,CAAA,WAAA,EAAA,eAAA,EAG7BP,SAAS,IAAIQ,YAAY,CAHI,SAGJ,CAHI,EAAA,uBAAA,EALlB,SAKkB,CALlB;AAaZ;AACA;AACA;AACA;AACA;AACA;AACAR,MAAAA,SAAS,EAnBG,SAAA;AAqBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,MAAAA,WAAW,EAAEC,0BAA0B,CAAA,MAAA,EAAA,WAAA,EAAqB,KAAA,CA/BhD,KA+B2B,CA/B3B;AAiCZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,MAAAA,KAAK,EAALA;AAxCY,KAAb;AA9BkB,WAAA,KAAA;AAwElB;;;;wCAEmB;AAAA,UACXe,eADW,GACS,KADT,KACS,CADT,eAAA;AAAA,UAEbZ,cAFa,GAEM,KAFN,KAEM,CAFN,cAAA;AAAA,UAGFa,eAHE,GAGkB,KAHlB,KAGkB,CAHlB,OAAA;;AAInB,UAAA,eAAA,EAAqB;AACpB,YAAA,cAAA,EAAoB;AACnB,cAAI,CAAC,KAAA,2BAAA,CAAL,cAAK,CAAL,EAAuD;AACtDb,YAAAA,cAAc,GAAdA,SAAAA;AACA;AACD;;AACD,YAAIa,eAAe,KAAnB,cAAA,EAAwC;AACvCD,UAAAA,eAAe,CAAfA,eAAe,CAAfA;AACA;AACD;AACD;;;uCAEkBE,S,EAAWC,S,EAAW;AAAA,UAChCH,eADgC,GACZ,KADY,KACZ,CADY,eAAA;AAAA,UAEhCL,OAFgC,GAEpB,KAFoB,KAEpB,CAFoB,OAAA,CAAA,CAGxC;;AACA,UAAIK,eAAe,IAAIL,OAAO,KAAKQ,SAAS,CAA5C,OAAA,EAAsD;AACrDH,QAAAA,eAAe,CAAfA,OAAe,CAAfA;AACA;MAGF;;;;kCAkJc;AAAA,UACLqB,QADK,GACQ,KADR,KACQ,CADR,QAAA;AAEb,aAAOA,QAAQ,IAAI,KAAnB,QAAA;MAGD;AACA;AACA;AACA;AACA;;;;6BA2HS;AAAA,UAAA,YAAA,GAoCJ,KApCI,KAAA;AAAA,UAGPW,IAHO,GAAA,YAAA,CAAA,IAAA;AAAA,UAIPC,QAJO,GAAA,YAAA,CAAA,QAAA;AAAA,UAKPC,YALO,GAAA,YAAA,CAAA,YAAA;AAAA,UAMPC,KANO,GAAA,YAAA,CAAA,KAAA;AAAA,UAOPC,SAPO,GAAA,YAAA,CAAA,SAAA;AAAA,UAUPf,QAVO,GAAA,YAAA,CAAA,QAAA;AAAA,UAWPgB,cAXO,GAAA,YAAA,CAAA,cAAA;AAAA,UAYPC,gBAZO,GAAA,YAAA,CAAA,gBAAA;AAAA,UAaPC,UAbO,GAAA,YAAA,CAAA,UAAA;AAAA,UAgBiBC,sBAhBjB,GAAA,YAAA,CAAA,sBAAA;AAAA,UAiBPpB,kBAjBO,GAAA,YAAA,CAAA,kBAAA;AAAA,UAoBPhC,cApBO,GAAA,YAAA,CAAA,cAAA;AAAA,UAqBPC,SArBO,GAAA,YAAA,CAAA,SAAA;AAAA,UAsBPF,mBAtBO,GAAA,YAAA,CAAA,mBAAA;AAAA,UAuBPN,MAvBO,GAAA,YAAA,CAAA,MAAA;AAAA,UAwBP4D,KAxBO,GAAA,YAAA,CAAA,KAAA;AAAA,UAyBPC,aAzBO,GAAA,YAAA,CAAA,aAAA;AAAA,UA0BPC,OA1BO,GAAA,YAAA,CAAA,OAAA;AAAA,UA2BPzD,sBA3BO,GAAA,YAAA,CAAA,sBAAA;AAAA,UA4BP0D,iBA5BO,GAAA,YAAA,CAAA,iBAAA;AAAA,UA6BPC,gCA7BO,GAAA,YAAA,CAAA,gCAAA;AAAA,UA8BP7C,eA9BO,GAAA,YAAA,CAAA,eAAA;AAAA,UA+BPc,cA/BO,GAAA,YAAA,CAAA,cAAA;AAAA,UAgCPgC,KAhCO,GAAA,YAAA,CAAA,KAAA;AAAA,UAiCPlE,QAjCO,GAAA,YAAA,CAAA,QAAA;AAAA,UAkCPyB,aAlCO,GAAA,YAAA,CAAA,aAAA;AAAA,UAmCJ0C,IAnCI,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,EAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,wBAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,qBAAA,EAAA,QAAA,EAAA,OAAA,EAAA,eAAA,EAAA,SAAA,EAAA,wBAAA,EAAA,mBAAA,EAAA,kCAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,UAAA,EAAA,eAAA,CAAA,CAAA;;AAAA,UAAA,YAAA,GA0CJ,KA1CI,KAAA;AAAA,UAuCPpD,OAvCO,GAAA,YAAA,CAAA,OAAA;AAAA,UAwCPG,WAxCO,GAAA,YAAA,CAAA,WAAA;AAAA,UAyCPmB,SAzCO,GAAA,YAAA,CAAA,SAAA;AA4CR,UAAM+B,cAAc,GAAGT,UAAU,GAAA,UAAA,GAAjC,UAAA;AAEA,UAAMU,oBAAoB,GAAGC,2BAA2B,CAAC,YAAM;AAC9D,eAAOC,kBAAkB,CACxBC,uBAAuB,CACtB/D,SAAS,IAAIQ,YAAY,CADH,QACG,CADH,EAAA,MAAA,EADC,sBACD,CADC,EAMxBwD,0BAA0B,CAAA,mBAAA,EAN3B,QAM2B,CANF,CAAzB;AADuD,OAAA,EASrD,CAAA,SAAA,EAAA,mBAAA,EAAA,sBAAA,EAAA,MAAA,EATH,QASG,CATqD,CAAxD;AAiBA,aACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACC,QAAA,KAAK,EADN,KAAA;AAEC,QAAA,SAAS,EAAEC,UAAU,CAAA,SAAA,EAAA,YAAA,EAA0B;AAC9C,+BAAqBrC;AADyB,SAA1B;AAFtB,OAAA,EAOC,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,QAAA,CAAA;AACC,QAAA,IAAI,EAAEe,IAAI,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,SAAA,CAAA,GADX,SAAA;AAEC,sBAAYnD,MAAM,CAACc;AAFpB,OAAA,EAAA,kBAAA,EAAA;AAIC,QAAA,KAAK,EAJN,OAAA;AAKC,QAAA,OAAO,EALR,oBAAA;AAMC,QAAA,QAAQ,EAAE,KANX,eAAA;AAOC,QAAA,OAAO,EAAE,KAPV,cAAA;AAQC,QAAA,MAAM,EAAE,KART,aAAA;AASC,QAAA,QAAQ,EAAEsC,QAAQ,IAAKb,kBAAkB,IAAIA,kBAAkB,CAThE,QAAA;AAUC,QAAA,aAAa,EAAE,KAAKmC;AAVrB,OAAA,CAAA,CAPD,EAoBC,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,QAAA,CAAA;AACC,QAAA,GAAG,EAAE,KADN,WACM,EADN;AAEC,QAAA,IAAI,EAFL,KAAA;AAGC,QAAA,YAAY,EAAErB;AAHf,OAAA,EAAA,gBAAA,EAAA,IAAA,EAAA;AAMC,QAAA,IAAI,EANL,IAAA;AAOC,QAAA,QAAQ,EAPT,QAAA;AAQC,QAAA,OAAO,EARR,OAAA;AASC,QAAA,KAAK,EAAEpC,WAAW,IATnB,EAAA;AAUC,QAAA,QAAQ,EAAE,KAVX,QAAA;AAWC,QAAA,OAAO,EAAE,KAXV,OAAA;AAYC,QAAA,MAAM,EAAE,KAZT,MAAA;AAaC,QAAA,QAAQ,EAbT,QAAA;AAcC,QAAA,cAAc,EAdf,cAAA;AAeC,QAAA,SAAS,EAAEwD,UAAU,CAAA,iBAAA,EAEpBhB,gBAAgB,IAAIA,gBAAgB,CAFhB,SAAA,EAGpBS,IAAI,CAHgB,SAAA;AAftB,OAAA,CAAA,CApBD,CADD;AA2CA;;;6CApO+BrD,K,EAAO4B,K,EAAO;AAAA,UAE5C3B,OAF4C,GAUzC2B,KAVyC,CAAA,OAAA;AAAA,UAG5CT,uBAH4C,GAUzCS,KAVyC,CAAA,uBAAA;AAAA,UAI5CrC,KAJ4C,GAUzCqC,KAVyC,CAAA,KAAA;AAAA,UAAA,YAAA,GAUzCA,KAVyC,CAAA,KAAA;AAAA,UAM3BC,kBAN2B,GAAA,YAAA,CAAA,cAAA;AAAA,UAOpCC,SAPoC,GAAA,YAAA,CAAA,KAAA;AAAA,UAQpCC,SARoC,GAAA,YAAA,CAAA,KAAA;AAAA,UAa5C7C,QAb4C,GAmBzCc,KAnByC,CAAA,QAAA;AAAA,UAc5CL,SAd4C,GAmBzCK,KAnByC,CAAA,SAAA;AAAA,UAe5BgC,iBAf4B,GAmBzChC,KAnByC,CAAA,cAAA;AAAA,UAgBrCiB,QAhBqC,GAmBzCjB,KAnByC,CAAA,KAAA;AAAA,UAiBrCiC,QAjBqC,GAmBzCjC,KAnByC,CAAA,KAAA;AAAA,UAkB5CW,aAlB4C,GAmBzCX,KAnByC,CAAA,aAAA;AAqB7C,UAAMkC,QAAQ,GAAG;AAChB;AACAlC,QAAAA,KAAK,EAFW,KAAA;AAGhB;AACA;AACA;AACA;AACAmB,QAAAA,uBAAuB,EAAvBA;AAPgB,OAAjB,CArB6C,CA+B7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIc,QAAQ,KAAZ,SAAA,EAA4B;AAC3B,eAAA,aAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEC7B,UAAAA,WAAW,EAFZ,SAAA;AAGCb,UAAAA,KAAK,EAHN,SAAA;AAICU,UAAAA,OAAO,EAJR,iBAAA;AAKCkB,UAAAA,uBAAuB,EAAEgB;AAL1B,SAAA,CAAA;AA3C4C,OAAA,CAoD7C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAIH,iBAAiB,KAAjBA,kBAAAA,IACH,CADGA,uBAAAA,KAED,CAAA,KAAA,IAAU,CAAX,QAAC,IACArB,aAAa,IACbpB,KAAK,KAAK6C,qBAAqB,CAAA,SAAA,EAAA,kBAAA,EAAA,aAAA,EAD/BzB,QAC+B,CAD/BA,IAEApB,KAAK,KAAK6C,qBAAqB,CAAA,SAAA,EAAA,iBAAA,EAAA,aAAA,EALlC,QAKkC,CAL9BJ,CAAJ,EAQE;AACD,eAAA,aAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEC/B,UAAAA,OAAO,EAAES,2BAA2B,CAAA,iBAAA,EAA3BA,QAA2B,CAA3BA,GAAAA,iBAAAA,GAFV,kBAAA;AAGC;AACA;AACAN,UAAAA,WAAW,EAAEC,0BAA0B,CAAA,QAAA,EAAA,SAAA,EALxC,KAKwC,CALxC,CAMC;AACA;;AAPD,SAAA,CAAA;AATD,OAAA,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA,WA8BK,IAAIY,QAAQ,KAARA,SAAAA,IAA0BA,QAAQ,KAAtC,KAAA,EAAkD;AACtD,cAAMpB,WAAW,GAAGC,gBAAgB,CAAA,QAAA,EAApC,QAAoC,CAApC;AACA,cAAA,aAAA;;AACA,cAAA,WAAA,EAAiB;AAChB,gBAAMH,UAAS,GAAGC,qBAAqB,CAACI,KAAK,CAAN,SAAA,EAAvC,QAAuC,CAAvC;;AACA,gBAAI,CAAA,UAAA,IAAcL,UAAS,CAATA,OAAAA,CAAkBE,WAAW,CAA7BF,OAAAA,KAAlB,CAAA,EAA+D;AAC9D0C,cAAAA,aAAa,GAAGxC,WAAW,CAA3BwC,OAAAA;AACA;AACD;;AACD,cAAI,CAAJ,QAAA,EAAe;AACdH,YAAAA,QAAQ,CAARA,uBAAAA,GAAAA,SAAAA;AACA;;AACD,iBAAA,aAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAEC9B,YAAAA,WAAW,EAAEC,0BAA0B,CAAA,QAAA,EAAA,WAAA,EAFxC,KAEwC,CAFxC;AAGCd,YAAAA,KAAK,EAHN,QAAA;AAICU,YAAAA,OAAO,EAAEgB,QAAQ,GAAA,aAAA,GAAmBe;AAJrC,WAAA,CAAA;AArG4C,SAAA,CA6G7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,aAAA,QAAA;AACA;;;;EA1X8B3C,KAAK,CAACC,a,GAyetC;;;AACA,IAAMwE,gBAAgB,GAAG,KAAK,CAAL,UAAA,CAAiB,UAAA,KAAA,EAAA,GAAA,EAAA;AAAA,SACzC,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA8B,IAAA,QAAQ,EAAEC;AAAxC,GAAA,CAAA,CADyC;AAA1C,CAAyB,CAAzB;AAIAD,gBAAgB,CAAhBA,SAAAA,GAA6B;AAC5B;;;;;;;AAOAvE,EAAAA,KAAK,EAAEyE,SAAS,CARY,MAAA;;AAU5B;;;AAGApD,EAAAA,QAAQ,EAAEoD,SAAS,CAATA,IAAAA,CAbkB,UAAA;;AAe5B;;;;AAIAxC,EAAAA,OAAO,EAAEwC,SAAS,CAnBU,IAAA;;AAqB5B;;;;AAIAvC,EAAAA,MAAM,EAAEuC,SAAS,CAzBW,IAAA;;AA2B5B;;;;AAIAC,EAAAA,SAAS,EAAED,SAAS,CA/BQ,IAAA;;AAiC5B;;;;AAIAzB,EAAAA,QAAQ,EAAEyB,SAAS,CArCS,IAAA;;AAuC5B;;;;;;;;;;;;;;;;;;;;AAoBA;AACAxB,EAAAA,YAAY,EAAEwB,SAAS,CAATA,MAAAA,CA5Dc,UAAA;;AA8D5B;;;;;;;;;;;;;;;;;;;AAmBA;AACAb,EAAAA,gCAAgC,EAAEa,SAAS,CAATA,IAAAA,CAlFN,UAAA;;AAoF5B;;;;;;AAMA;AACAtE,EAAAA,cAAc,EAAEsE,SAAS,CA3FG,MAAA;;AA6F5B;;;;;;;AAOArE,EAAAA,SAAS,EAAEqE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CApGV,MAoGjBA,CApGiB;;AAsG5B;;;;;;;;;;AAUA7E,EAAAA,MAAM,EAAE+E,cAAc,CAhHM,UAAA;;AAkH5B;;;;;;;;;;;;;AAaAjB,EAAAA,OAAO,EAAEe,SAAS,CAATA,MAAAA,CA/HmB,UAAA;;AAiI5B;;;;;;;;;;;;;;;;;;;;;;AAsBAjB,EAAAA,KAAK,EAAEiB,SAAS,CAATA,QAAAA,CAAmBA,SAAS,CAvJP,WAuJrBA,CAvJqB;;AAyJ5B;;;;;;;;;;AAUAhB,EAAAA,aAAa,EAAEgB,SAAS,CAATA,WAAAA,CAnKa,UAAA;;AAqK5B;;;AAGAxE,EAAAA,sBAAsB,EAAEwE,SAAS,CAATA,IAAAA,CAxKI,UAAA;;AA0K5B;;;;;;;;AAQAd,EAAAA,iBAAiB,EAAEc,SAAS,CAATA,WAAAA,CAlLS,UAAA;;AAoL5B;;;;;;;;;;AAUAvE,EAAAA,mBAAmB,EAAEuE,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CA9LpB,MA8LPA,CA9LO;;AAgM5B;;;AAGAvB,EAAAA,KAAK,EAAEuB,SAAS,CAnMY,MAAA;;AAqM5B;;;AAGAtB,EAAAA,SAAS,EAAEsB,SAAS,CAxMQ,MAAA;;AA0M5B;;;;;;;;;;;;;;;;AAgBAG,EAAAA,sBAAsB,EAAEH,SAAS,CAATA,WAAAA,CA1NI,UAAA;;AA4N5B;;;;;AAKAtC,EAAAA,kBAAkB,EAAEsC,SAAS,CAjOD,MAAA;;AAmO5B;;;;;;;;;;;;;AAaArB,EAAAA,cAAc,EAAEqB,SAAS,CAATA,WAAAA,CAhPY,UAAA;;AAkP5B;;;AAGApB,EAAAA,gBAAgB,EAAEoB,SAAS,CArPC,MAAA;;AAuP5B;;;;;;;AAOA;AACAnB,EAAAA,UAAU,EAAEmB,SAAS,CAATA,IAAAA,CA/PgB,UAAA;;AAiQ5B;;;AAGArD,EAAAA,aAAa,EAAEqD,SAAS,CApQI,IAAA;;AAsQ5B;;;;AAIA5C,EAAAA,cAAc,EAAE4C,SAAS,CAATA,IAAAA,CA1QY,UAAA;;AA4Q5B;;;;;;AAMA9E,EAAAA,QAAQ,EAAEkF,gBAAgB,CAlRE,UAAA;;AAoR5B;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA9D,EAAAA,eAAe,EAAE0D,SAAS,CAACK;AAhSC,CAA7BP;AAmSAA,gBAAgB,CAAhBA,YAAAA,GAAgC;AAC/B;;;AAGAtB,EAAAA,YAAY,EAJmB,KAAA;;AAM/B;;;AAGAQ,EAAAA,aAAa,EATkB,IAAA;;AAW/B;;;AAGA;AACAC,EAAAA,OAAO,EAfwB,kEAAA;;AAiB/B;;;AAGAC,EAAAA,iBAAiB,EApBc,iBAAA;;AAsB/B;;;AAGAP,EAAAA,cAAc,EAzBiB,OAAA;;AA2B/B;;;;;;;;;;;;AAYA;AACAS,EAAAA,KAAK,EAAEY,SAAS,CAxCe,GAAA;;AA0C/B;;;;;;;;;AASAb,EAAAA,gCAAgC,EAnDD,KAAA;;AAqD/B;;;AAGAN,EAAAA,UAAU,EAxDqB,IAAA;;AA0D/B;;;;AAIArD,EAAAA,sBAAsB,EA9DS,IAAA;;AAgE/B;;;;AAIA4B,EAAAA,cAAc,EAAE;AApEe,CAAhC0C;AAuEA,eAAA,gBAAA;AAEA;;;;;;;;;;;AAUA,SAAA,0BAAA,CAAA,KAAA,EAAA,WAAA,EAAA,IAAA,EAKG;AAAA,MAJFnD,aAIE,GAAA,IAAA,CAJFA,aAIE;AAAA,MAHFjB,cAGE,GAAA,IAAA,CAHFA,cAGE;AAAA,MAFFR,QAEE,GAAA,IAAA,CAFFA,QAEE;AAAA,MADFiE,gCACE,GAAA,IAAA,CADFA,gCACE,CAAA,CACF;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIA,gCAAgC,IAAhCA,WAAAA,IAAmDtD,WAAW,CAAlE,OAAA,EAA4E;AAC3E,WAAOyE,4BAA4B,CAAnC,WAAmC,CAAnC;AACA;;AACD,SAAOlC,qBAAqB,CAAA,KAAA,EAAA,cAAA,EAAA,aAAA,EAA5B,QAA4B,CAA5B;AACA;;AAED,IAAA,wBAAA;AACA,IAAA,oCAAA;;AACA,SAAA,2BAAA,CAAA,SAAA,EAAA,YAAA,EAA8D;AAC7D,MAAI,CAAA,oCAAA,IACH,CAACmC,cAAc,CAAA,YAAA,EADhB,oCACgB,CADhB,EACsE;AACrEC,IAAAA,wBAAwB,GAAGC,SAA3BD,EAAAA;AACAE,IAAAA,oCAAoC,GAApCA,YAAAA;AACA;;AACD,SAAA,wBAAA;AACA;;AAED,SAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAA8B;AAC7B,MAAIC,CAAC,CAADA,MAAAA,KAAaC,CAAC,CAAlB,MAAA,EAA2B;AAC1B,WAAA,KAAA;AACA;;AACD,MAAIC,CAAC,GAAL,CAAA;;AACA,SAAOA,CAAC,GAAGF,CAAC,CAAZ,MAAA,EAAqB;AACpB,QAAIA,CAAC,CAADA,CAAC,CAADA,KAASC,CAAC,CAAd,CAAc,CAAd,EAAmB;AAClB,aAAA,KAAA;AACA;;AACDC,IAAAA,CAAC;AACD;;AACD,SAAA,IAAA;AACA","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport Flag from './Flag'\r\nimport InternationalIcon from './InternationalIcon'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './countries'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForPartialE164Number,\r\n\tgetInitialParsedInput,\r\n\tparseInput,\r\n\te164\r\n} from './phoneInputHelpers'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tinputRef = React.createRef()\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\taddInternationalOption,\r\n\t\t\tmetadata,\r\n\t\t\tcountryOptionsOrder\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: getPreSelectedCountry(\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tcountries || getCountries(metadata),\r\n\t\t\t\taddInternationalOption,\r\n\t\t\t\tmetadata\r\n\t\t\t),\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `parsedInput` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsedInput` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsedInput` is `+78005553535`.\r\n\t\t\tparsedInput: generateInitialParsedInput(value, phoneNumber, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsedInput` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsedInput` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tparsedInput: prevParsedInput,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newParsedInput = migrateParsedInputForNewCountry(\r\n\t\t\tprevParsedInput,\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tinternational ? false : true\r\n\t\t)\r\n\r\n\t\tconst newValue = e164(newParsedInput, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.getInputRef().current.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tparsedInput: newParsedInput,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_input) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tinput,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = parseInput(\r\n\t\t\t_input,\r\n\t\t\tthis.state.parsedInput,\r\n\t\t\tthis.state.country,\r\n\t\t\tdefaultCountry,\r\n\t\t\tthis.state.countries,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.setState({\r\n\t\t\tparsedInput: input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetInputRef() {\r\n\t\tconst { inputRef } = this.props\r\n\t\treturn inputRef || this.inputRef\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsedInput` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops: {\r\n\t\t\t\tdefaultCountry: prevDefaultCountry,\r\n\t\t\t\tvalue: prevValue,\r\n\t\t\t\treset: prevReset\r\n\t\t\t}\r\n\t\t} = state\r\n\r\n\t\tconst {\r\n\t\t\tmetadata,\r\n\t\t\tcountries,\r\n\t\t\tdefaultCountry: newDefaultCountry,\r\n\t\t\tvalue: newValue,\r\n\t\t\treset: newReset,\r\n\t\t\tinternational\r\n\t\t} = props\r\n\r\n\t\tconst newState = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the `defaultCountry` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// Some users requested a way to reset the component\r\n\t\t// (both number `<input/>` and country `<select/>`).\r\n\t\t// Whenever `reset` property changes both number `<input/>`\r\n\t\t// and country `<select/>` are reset.\r\n\t\t// It's not implemented as some instance `.reset()` method\r\n\t\t// because `ref` is forwarded to `<input/>`.\r\n\t\t// It's also not replaced with just resetting `country` on\r\n\t\t// external `value` reset, because a user could select a country\r\n\t\t// and then not input any `value`, and so the selected country\r\n\t\t// would be \"stuck\", if not using this `reset` property.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\t\tif (newReset !== prevReset) {\r\n\t\t\treturn {\r\n\t\t\t\t...newState,\r\n\t\t\t\tparsedInput: undefined,\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (newDefaultCountry !== prevDefaultCountry &&\r\n\t\t\t!hasUserSelectedACountry && (\r\n\t\t\t\t(!value && !newValue) ||\r\n\t\t\t\t(international &&\r\n\t\t\t\t\tvalue === getInitialParsedInput(undefined, prevDefaultCountry, international, metadata) &&\r\n\t\t\t\t\tvalue === getInitialParsedInput(undefined, newDefaultCountry, international, metadata)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\t...newState,\r\n\t\t\t\tcountry: isCountrySupportedWithError(newDefaultCountry, metadata) ? newDefaultCountry : prevDefaultCountry,\r\n\t\t\t\t// If `parsedInput` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `parsedInput` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\tparsedInput: generateInitialParsedInput(newValue, undefined, props)\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsedInput` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `newValue !== prevValue` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `newValue !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (newValue !== prevValue && newValue !== value) {\r\n\t\t\tconst phoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tlet parsedCountry\r\n\t\t\tif (phoneNumber) {\r\n\t\t\t\tconst countries = getSupportedCountries(props.countries, metadata)\r\n\t\t\t\tif (!countries || countries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!newValue) {\r\n\t\t\t\tnewState.hasUserSelectedACountry = undefined\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...newState,\r\n\t\t\t\tparsedInput: generateInitialParsedInput(newValue, phoneNumber, props),\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `defaultCountry` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsedInput` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// So no need to update state here really.\r\n\t\t// Could as well return `null` explicitly\r\n\t\t// to indicate that the `state` hasn't changed.\r\n\t\t// But just in case, returns `newState`.\r\n\t\t// (who knows if someone adds something\r\n\t\t// changing `newState` above in some future)\r\n\t\treturn newState\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tparsedInput,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions(\r\n\t\t\t\t\tcountries || getCountries(metadata),\r\n\t\t\t\t\tlabels,\r\n\t\t\t\t\taddInternationalOption\r\n\t\t\t\t),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.getInputRef()}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={parsedInput || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * Updates the `value` as the user inputs the phone number.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t * @ignore\r\n\t */\r\n\tonKeyDown: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to disable both the phone number `<input/>`\r\n\t * and the country `<select/>`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if this flag is set to `true`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, this flag is set to `false`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `false` by default)\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted, in which case it will automatically be added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * By default, the caret position is being \"intelligently\" managed\r\n\t * while a user inputs a phone number.\r\n\t * This \"smart\" caret behavior can be turned off\r\n\t * by passing `smartCaret={false}` property.\r\n\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://catamphetamine.gitlab.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t * Don't convert the initially passed phone number `value`\r\n\t * to a national phone number for its country.\r\n\t * The reason is that the newer generation grows up when\r\n\t * there are no stationary phones and therefore everyone inputs\r\n\t * phone numbers with a `+` in their smartphones\r\n\t * so phone numbers written in international form\r\n\t * are gradually being considered more natural than local ones.\r\n\t */\r\n\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\n/**\r\n * Gets initial `parsedInput` value.\r\n * @param  {string} [value]\r\n * @param  {PhoneNumber} [phoneNumber]\r\n * @param  {boolean} [options.international]\r\n * @param  {string} [options.defaultCountry]\r\n * @param  {boolean} options.displayInitialValueAsLocalNumber\r\n * @param  {object} options.metadata\r\n * @return {string} [parsedInput]\r\n */\r\nfunction generateInitialParsedInput(value, phoneNumber, {\r\n\tinternational,\r\n\tdefaultCountry,\r\n\tmetadata,\r\n\tdisplayInitialValueAsLocalNumber\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\treturn getInitialParsedInput(value, defaultCountry, international, metadata)\r\n}\r\n\r\nlet countrySelectOptionsMemo\r\nlet countrySelectOptionsMemoDependencies\r\nfunction useMemoCountrySelectOptions(generator, dependencies) {\r\n\tif (!countrySelectOptionsMemoDependencies ||\r\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\r\n\t\tcountrySelectOptionsMemo = generator()\r\n\t\tcountrySelectOptionsMemoDependencies = dependencies\r\n\t}\r\n\treturn countrySelectOptionsMemo\r\n}\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}"]},"metadata":{},"sourceType":"module"}