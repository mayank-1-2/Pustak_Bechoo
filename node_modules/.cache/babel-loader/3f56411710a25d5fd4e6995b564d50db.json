{"ast":null,"code":"import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var _type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\nexport function is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","map":{"version":3,"sources":["../source/getNumberType_.js"],"names":["NON_FIXED_LINE_PHONE_TYPES","options","input","metadata","nationalNumber","matchesEntirely","is_of_type","_type","type","type_info","possible_lengths","checkNumberLengthForType","mobile_type","mergeArrays","actual_length","minimum_length"],"mappings":"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","sourcesContent":["import Metadata from './metadata'\r\nimport { matchesEntirely, mergeArrays } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}"]},"metadata":{},"sourceType":"module"}