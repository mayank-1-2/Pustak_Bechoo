{"ast":null,"code":"import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return \"break\";\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return \"break\";\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    var _ret = _loop();\n\n    if (_ret === \"break\") break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}","map":{"version":3,"sources":["../source/countries.js"],"names":["optionsOnTop","optionsOnBottom","appendTo","element","divider","index","option","options","countryOptions","isCountrySupportedWithError","isSupportedCountry","console","countries"],"mappings":"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","sourcesContent":["import { isSupportedCountry } from 'libphonenumber-js/core'\r\nexport { getCountries } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\r\nexport function sortCountryOptions(options, order) {\r\n\tif (!order) {\r\n\t\treturn options\r\n\t}\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\tfor (const element of order) {\r\n\t\tif (element === '|') {\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t} else if (element === '...' || element === '…') {\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t} else {\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nexport function getSupportedCountryOptions(countryOptions, metadata) {\r\n\tif (countryOptions) {\r\n\t\tcountryOptions = countryOptions.filter((option) => {\r\n\t\t\tswitch (option) {\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '...':\r\n\t\t\t\tcase '…':\r\n\t\t\t\t\treturn true\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn isCountrySupportedWithError(option, metadata)\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (countryOptions.length > 0) {\r\n\t\t\treturn countryOptions\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isCountrySupportedWithError(country, metadata) {\r\n\tif (isSupportedCountry(country, metadata)) {\r\n\t\treturn true\r\n\t} else {\r\n\t\tconsole.error(`Country not found: ${country}`)\r\n\t\treturn false\r\n\t}\r\n}\r\n\r\nexport function getSupportedCountries(countries, metadata) {\r\n\tif (countries) {\r\n\t\tcountries = countries.filter(country => isCountrySupportedWithError(country, metadata))\r\n\t\tif (countries.length === 0) {\r\n\t\t\tcountries = undefined\r\n\t\t}\r\n\t}\r\n\treturn countries\r\n}"]},"metadata":{},"sourceType":"module"}