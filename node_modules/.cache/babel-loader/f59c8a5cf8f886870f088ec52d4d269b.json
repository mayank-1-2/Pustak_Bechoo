{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = getIDDPrefix(options.fromCountry, undefined, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = \"\".concat(IDDPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options));\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return \"\".concat(IDDPrefix).concat(countryCallingCode).concat(nationalNumber);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalSeparator) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\n\nexport function applyInternationalSeparatorStyle(local) {\n  return local.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n  }\n}","map":{"version":3,"sources":["../source/format_.js"],"names":["DEFAULT_OPTIONS","formatExtension","metadata","options","input","countryCallingCode","nationalNumber","number","formatNationalNumber","addExtension","formatRFC3966","ext","IDDPrefix","getIDDPrefix","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","formattedNumber","format","useInternationalSeparator","useNationalPrefixFormattingRule","applyInternationalSeparatorStyle","chooseFormatForNumber","formatNationalNumberUsingFormat","formatAs","lastLeadingDigitsPattern","nationalNnumber","matchesEntirely","local","fromCountryMetadata","toCountryMetadata","toCountryCallingCode"],"mappings":"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","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, undefined, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable) {\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(\r\n\t\t\t\t\tnationalNumber,\r\n\t\t\t\t\tmetadata.countryCallingCode(),\r\n\t\t\t\t\toptions.fromCountry,\r\n\t\t\t\t\tmetadata,\r\n\t\t\t\t\toptions\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\tuseInternationalSeparator,\r\n\tuseNationalPrefixFormattingRule,\r\n\tmetadata\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalSeparator ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tuseNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\tif (useInternationalSeparator) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction formatNationalNumber(number, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\tformatAs === 'INTERNATIONAL',\r\n\t\tformat.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true,\r\n\t\tmetadata\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function applyInternationalSeparatorStyle(local) {\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDDSameCountryCallingCodeNumber(\r\n\tnumber,\r\n\ttoCountryCallingCode,\r\n\tfromCountry,\r\n\ttoCountryMetadata,\r\n\toptions\r\n) {\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1') {\r\n\t\t\treturn toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options)\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}